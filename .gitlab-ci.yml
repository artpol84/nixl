# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

default:
  image: nvidia/cuda:12.8.0-devel-ubuntu24.04

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

stages:          # List of stages for jobs, and their order of execution
  - build
  - test

.tags_builder: &TAGS_BUILDER
  [ os/linux ]

variables:
  INSTALL_DIR_NAME: "install"
  INSTALL_DIR: "$CI_BUILDS_DIR/$CI_PROJECT_NAMESPACE/$INSTALL_DIR_NAME"

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  before_script:
    - apt-get -qq update
    - |
      apt-get -qq install -y curl \
                             git \
                             libnuma-dev \
                             numactl \
                             autotools-dev \
                             automake \
                             libtool \
                             libz-dev \
                             libiberty-dev \
                             flex \
                             build-essential \
                             cmake \
                             libibverbs-dev \
                             libgoogle-glog-dev \
                             libgtest-dev \
                             libjsoncpp-dev \
                             libpython3-dev \
                             libboost-all-dev \
                             libssl-dev \
                             libgrpc-dev \
                             libgrpc++-dev \
                             libprotobuf-dev \
                             meson \
                             ninja-build \
                             pkg-config \
                             protobuf-compiler-grpc \
                             pybind11-dev \
                             etcd-server \
                             net-tools \
                             pciutils \
                             libpci-dev \
                             uuid-dev \
                             ibverbs-utils \
                             libibmad-dev
    - curl -fSsL "https://github.com/openucx/ucx/tarball/v1.18.0" | tar xz && \
    - |
      ( \
        cd openucx-ucx* && \
        ./autogen.sh && \
        ./configure \
          --prefix=${INSTALL_DIR} \
          --enable-shared \
          --disable-static \
          --disable-doxygen-doc \
          --enable-optimizations \
          --enable-cma \
          --enable-devel-headers \
          --with-verbs \
          --with-dm \
          --enable-mt \
          --with-mlx5-dv && \
        make -j && \
        make -j install-strip && \
        ldconfig \
      )
  script:
    - export LD_LIBRARY_PATH=${INSTALL_DIR}/lib:$LD_LIBRARY_PATH
    - export CPATH=${INSTALL_DIR}/include:$CPATH
    - export PATH=${INSTALL_DIR}/bin:$PATH
    - export PKG_CONFIG_PATH=${INSTALL_DIR}/lib/pkgconfig:$PKG_CONFIG_PATH
    - env
    - echo "$INSTALL_DIR"
    - meson setup build --prefix=${INSTALL_DIR} -Ducx_path=${INSTALL_DIR}
    - (cd build && ninja && ninja install)
    - ls -l ${INSTALL_DIR}
    - mv ${INSTALL_DIR} .
    - ls -l .
    - ls -l ${INSTALL_DIR_NAME}
  artifacts:
    paths:
      - ${INSTALL_DIR_NAME}
      - build
    expire_in: 1 hour
  timeout: 0h 15m
  tags: *TAGS_BUILDER

test-cpp:       # This job runs in the build stage, which runs first.
  stage: test
  needs:
    - job: build-job
      artifacts: true
  before_script:
    - env
    - ls -l
    - ls -l ${INSTALL_DIR_NAME}
    - mv ${INSTALL_DIR_NAME} ..
    - ls -l ${INSTALL_DIR}
    - ls -l build
    - export LD_LIBRARY_PATH=${INSTALL_DIR}/lib:$LD_LIBRARY_PATH
    - export CPATH=${INSTALL_DIR}/include:$CPATH
    - export PATH=${INSTALL_DIR}/bin:$PATH
    - export PKG_CONFIG_PATH=${INSTALL_DIR}/lib/pkgconfig:$PKG_CONFIG_PATH
    - export PYTHONPATH=${PWD}/build/src/pybind
  script:
    - echo "==== Running C++ tests ===="
    - ./build/test/desc_example
    - ./build/test/agent_example
    - ./build/test/ucx_backend_test
    - ./build/test/ucx_backend_multi
    - ./build/src/utils/serdes/serdes_test
    - echo "${TXT_YELLOW}==== Disabled tests==="
    - echo "./build/test/md_streamer disabled"
    - echo "./build/test/nixl_test disabled"
    - echo "./build/test/p2p_test disabled"
    - echo "./build/src/utils/ucx/ucx_worker_test disabled"
    - echo "${TXT_CLEAR}"
  timeout: 0h 15m
  tags: *TAGS_BUILDER

test-python:       # This job runs in the build stage, which runs first.
  stage: test
  needs:
    - job: build-job
      artifacts: true
  before_script:
    - apt-get -qq update
    - |
      apt-get -qq install -y pybind11-dev \
                             python3 \
                             python3-numpy \
                             python3-pip
    - pip install --break-system-packages torch
    - env
    - ls -l
    - ls -l ${INSTALL_DIR_NAME}
    - mv ${INSTALL_DIR_NAME} ..
    - ls -l ${INSTALL_DIR}
    - ls -l build
    - export LD_LIBRARY_PATH=${INSTALL_DIR}/lib:$LD_LIBRARY_PATH
    - export CPATH=${INSTALL_DIR}/include:$CPATH
    - export PATH=${INSTALL_DIR}/bin:$PATH
    - export PKG_CONFIG_PATH=${INSTALL_DIR}/lib/pkgconfig:$PKG_CONFIG_PATH
    - export PYTHONPATH=${PWD}/build/src/pybind
  script:
    - echo "==== Running python tests with PYTHONPATH=$PYTHONPATH ===="
    - (cd test/python && python3 ./nixl_wrapper_test.py)
    - (cd test/python && python3 ./nixl_bindings_test.py)
  timeout: 0h 15m
  tags: *TAGS_BUILDER
