# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build

.tags_builder: &TAGS_BUILDER
  [ os/linux ]

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  before_script:
    - apt-get -qq update
    - apt-get -qq install -y build-essential meson ninja-build cmake uuid-dev pkg-config pybind11-dev wget python3 python3-pip python3-numpy
    - wget -nv https://github.com/openucx/ucx/releases/download/v1.18.0/ucx-1.18.0.tar.gz
    - pip install --break-system-packages torch
    - tar xf ucx-1.18.0.tar.gz
    - (cd ucx-1.18.0 && ./contrib/configure-release && make -j8 && make install)
  script:
    - meson setup build
    - meson compile -C build
    - echo "==== Running C++ tests ===="
    - ./build/test/desc_example
    - ./build/test/ucx_backend_multi
    - ./build/src/utils/serdes/serdes_test
    - export PYTHONPATH=$PWD/build/src/pybind
    - echo "==== Running python tests with PYTHONPATH=$PYTHONPATH ===="
    - (cd test/python && python3 ./nixl_wrapper_test.py)
    - (cd test/python && python3 ./nixl_bindings_test.py)
    - echo "==== Ignoring failing tests ==="
    - ./build/test/agent_example || echo "agent_example failed"
    - ./build/test/ucx_backend_example || echo "ucx_backend_example failed"
    - echo "==== Disabled tests==="
    - echo "./build/test/ucx_worker_test disabled"
    - echo "./build/test/md_streamer disabled"
    - echo "./build/test/nixl_test disabled"
    - echo "./build/test/p2p_test disabled"
  timeout: 0h 15m
  tags: *TAGS_BUILDER
